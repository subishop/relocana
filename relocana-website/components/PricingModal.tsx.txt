import React from 'react';

interface PricingModalProps {
  onClose: () => void;
  onChoosePlan: (planId: string) => void;
  isLoading: boolean;
}

const Tier: React.FC<{ 
  title: string; 
  price: string; 
  period: string; 
  features: string[]; 
  planId?: string;
  onChoosePlan?: (planId: string) => void;
  isLoading?: boolean;
  bestValue?: boolean;
  isCurrent?: boolean;
}> = ({ title, price, period, features, planId, onChoosePlan, isLoading, bestValue, isCurrent }) => (
    <div className={`relative border-2 rounded-xl p-6 text-center flex flex-col bg-zinc-900 ${bestValue ? 'border-orange-500' : 'border-zinc-800'}`}>
      {bestValue && <div className="absolute top-0 -translate-y-1/2 left-1/2 -translate-x-1/2 bg-orange-500 text-white text-xs font-bold px-3 py-1 rounded-full">BEST VALUE</div>}
      <h3 className="text-xl font-semibold text-white">{title}</h3>
      <p className="mt-2 h-12">
        {price && <span className="text-4xl font-bold text-white">${price}</span>}
        {period && <span className="text-base font-medium text-zinc-400">/{period}</span>}
      </p>
      <ul className="mt-6 space-y-3 text-zinc-300 flex-grow text-left">
        {features.map((feature, i) => (
          <li key={i} className="flex items-start">
            <svg className="w-5 h-5 mr-2 text-green-400 shrink-0 mt-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path></svg>
            <span>{feature}</span>
          </li>
        ))}
      </ul>
      <button 
        onClick={() => onChoosePlan && planId && onChoosePlan(planId)}
        disabled={isLoading || isCurrent}
        className={`mt-8 w-full py-3 font-semibold rounded-lg transition-colors flex items-center justify-center ${
            isCurrent 
            ? 'bg-zinc-800 text-zinc-400 cursor-default'
            : bestValue 
            ? 'bg-orange-500 text-white hover:bg-orange-600' 
            : 'bg-zinc-800 text-zinc-300 hover:bg-zinc-700'
        } disabled:opacity-70 disabled:cursor-not-allowed`}
      >
        {isLoading && onChoosePlan && planId ? (
          <>
            <svg className="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Redirecting...
          </>
        ) : isCurrent ? 'Current Plan' : 'Choose Plan' }
      </button>
    </div>
  );


export const PricingModal: React.FC<PricingModalProps> = ({ onClose, onChoosePlan, isLoading }) => {
  return (
    <div className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4" onClick={onClose}>
      <div className="bg-[#090b0c] border border-zinc-800 rounded-2xl shadow-xl w-full max-w-6xl animate-fade-in-up" onClick={(e) => e.stopPropagation()}>
        <div className="p-8 text-center">
            <h2 className="text-3xl font-extrabold text-white">Unlock Full Access</h2>
            <p className="mt-2 text-lg text-zinc-400">Choose the plan that's right for your journey.</p>
        </div>

        <div className="p-8 pt-0 grid grid-cols-1 lg:grid-cols-4 gap-6">
            <Tier 
              title="Free" 
              price=""
              period="Always Free" 
              features={['Compare up to 2 countries', 'Access basic data points']} 
              isCurrent={true}
            />
            <Tier 
              title="Monthly" 
              price="97" 
              period="mo" 
              features={['Compare all available countries', 'Access all data points', 'Unlimited comparisons', 'Email Support']} 
              planId="prod_TKtInUo4dSCdIy"
              onChoosePlan={onChoosePlan} 
              isLoading={isLoading}
            />
            <Tier 
              title="Quarterly" 
              price="227" 
              period="3 mo" 
              features={['All features of Monthly', 'Save & Export comparisons', 'Download data as CSV']}
              bestValue={true}
              planId="prod_TKtBPShbXAwlop"
              onChoosePlan={onChoosePlan} 
              isLoading={isLoading}
            />
            <Tier 
              title="Annual" 
              price="567" 
              period="yr" 
              features={['All features of Quarterly', 'Priority Support', 'Early access to new data']}
              planId="prod_TKsudqhoIXobFo"
              onChoosePlan={onChoosePlan} 
              isLoading={isLoading}
            />
        </div>
      </div>
    </div>
  );
};